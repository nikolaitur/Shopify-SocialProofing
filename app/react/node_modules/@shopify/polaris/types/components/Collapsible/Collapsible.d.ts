/// <reference types="react" />
import * as React from 'react';
export interface Props {
    open: boolean;
    children?: React.ReactNode;
}
export declare type AnimationState = 'idle' | 'measuring' | 'closingStart' | 'closing' | 'openingStart' | 'opening';
export interface State {
    height?: number | null;
    animationState: AnimationState;
}
export interface Context {
    parentCollapsibleExpanding: boolean;
}
export default class Collapsible extends React.Component<Props, State> {
    static contextTypes: {
        parentCollapsibleExpanding: React.Requireable<any>;
    };
    static childContextTypes: {
        parentCollapsibleExpanding: React.Requireable<any>;
    };
    context: Partial<Context>;
    state: State;
    private node;
    private heightNode;
    getChildContext(): Context;
    componentWillReceiveProps({open: willOpen}: Props): void;
    componentDidUpdate({open: wasOpen}: Props): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private bindNode(node);
    private bindHeightNode(node);
    private handleTransitionEnd(event);
}
